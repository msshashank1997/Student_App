name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      EC2_IP: "35.154.46.198"
      EC2_USERNAME: "ubuntu"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Ensure the application directory exists
            if [ ! -d "/home/ubuntu/application" ]; then
              mkdir -p /home/ubuntu/application
            fi
            sudo apt update
            sudo apt install -y python3
            sudo apt install -y python3-pip
            sudo apt install -y npm
            sudo apt install -y git
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo gpasswd -a $USER docker
      
      - name: clone the repository
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Clone the repository if it doesn't exist
            if [ ! -d "/home/ubuntu/application/.git" ]; then
              cd /home/ubuntu/application
              git clone https://github.com/msshashank1997/Student_App.git


      - name: Install Python Dependencies
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/application/Student_App
            # Install Python venv package
            sudo apt install -y python3-venv python3-full
            # Create a virtual environment
            python3 -m venv venv
            # Activate virtual environment and install dependencies
            source venv/bin/activate
            pip install -r requirements.txt

      - name: Build and Start Docker Containers
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/application/Student_App
            if ! command -v docker-compose &> /dev/null; then
                echo "docker-compose not found, installing..."
                sudo apt-get update
                sudo apt-get install -y docker-compose
            fi
            
            if sudo lsof -i :27017 | grep LISTEN; then
                echo "Port 27017 is already in use. Stopping existing process..."
                CONTAINER_ID=$(sudo docker ps -q --filter "publish=27017")
                if [ ! -z "$CONTAINER_ID" ]; then
                    echo "Stopping Docker container using port 27017..."
                    sudo docker stop $CONTAINER_ID
                else
                    # If not a Docker container, find and kill the process
                    PID=$(sudo lsof -t -i:27017)
                    if [ ! -z "$PID" ]; then
                        echo "Killing process $PID that is using port 27017..."
                        sudo kill -9 $PID
                    fi
                fi
            fi
            
            sudo docker-compose down
            sudo docker-compose up -d
            
            if ! sudo docker ps | grep mongo-studentdb; then
                echo "Error: MongoDB container failed to start"
                exit 1
            fi
          

      - name: Seed Database
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/application/Student_App
            sudo npm install
            sudo npm run import
          

      - name: Run Tests
        id: run_tests
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd /home/ubuntu/application/Student_App
            source venv/bin/activate
            
            # Run tests and capture exit code
            pytest test_app.py --maxfail=1 --disable-warnings -q
            TEST_EXIT_CODE=$?
            
            # If tests failed, stop services
            if [ $TEST_EXIT_CODE -ne 0 ]; then
                echo "Tests failed. Stopping services..."
                # Stop Docker containers
                sudo docker-compose down
                
                # Stop the Flask application running with Gunicorn on port 5000
                echo "Stopping Flask application on port 5000..."
                # Find processes using port 5000
                PORT_PIDS=$(lsof -t -i:5000 || echo "")
                if [ ! -z "$PORT_PIDS" ]; then
                    echo "Killing processes using port 5000: $PORT_PIDS"
                    kill -9 $PORT_PIDS || echo "Failed to kill some processes"
                fi
                
                # Also try to find gunicorn processes as a fallback
                GUNICORN_PIDS=$(pgrep gunicorn || echo "")
                if [ ! -z "$GUNICORN_PIDS" ]; then
                    echo "Killing gunicorn processes: $GUNICORN_PIDS"
                    kill -9 $GUNICORN_PIDS || echo "Failed to kill some gunicorn processes"
                fi
                
                # Verify port is free
                if lsof -i:5000 >/dev/null 2>&1; then
                    echo "WARNING: Port 5000 is still in use after cleanup attempt"
                else
                    echo "Port 5000 successfully released"
                fi
                
                # Log the failure for debugging
                echo "$(date): Tests failed, all services stopped" >> /home/ubuntu/application/deployment_log.txt
            else
                echo "Tests passed successfully. Services remain running."
            fi
            
            # Return the original exit code to propagate test failure
            exit $TEST_EXIT_CODE
